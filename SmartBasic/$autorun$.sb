//******************************************************************************
// Copyright (c) 2019, Knox
// Based on Laird's examples
//
// SPDX-License-Identifier:ISC
//
//
// Description of this application:
// This app monitors a distance and temperature periodically sends readings
// Over a LoRaWAN network

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Jumpers: 1  2
// 15 mins  X  X
// 30 mins  -  X
// 45 mins  X  -
// 1 hour   -  -
//******************************************************************************

//******************************************************************************
// Library Import
//******************************************************************************
#include "RM1xx-defs.h"

//******************************************************************************
// Definitions
//******************************************************************************

// Which maxbotix sensor is in use? MB7060 or MB7389
#define MB7060 1

//Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                  0

//Set to 1 to automatically join the LoRa network at startup. Set 0 to disable it
#define AUTO_JOIN       1

//OTAA. To use ABP, replace the value with LORAMAC_JOIN_BY_PERSONALIZATION or 0
#define JOIN_TYPE       LORAMAC_JOIN_BY_REQUEST

//SIO17 is connected to jumper 1 and SIO03 is connected to jumper 2
//These are used to set the transmission period
#define JUMPER1         17
#define JUMPER2         3

//SIO5 is connected to enable distance
#define ENABLE_SENSORS      4

//SIO5 is connected to the temperature input (not used)
#define TEMP_SENSOR_PIN    5

//SIO6 is connected to the sensor input
#define DISTANCE_SENSOR_PIN    6

// Number of local samples from ultrasonic per reading interval (for median)
#define LOCAL_SAMPLES   5

//********************************************************//
// BLE Device Name
//********************************************************//
#define DEVICE_NAME          "Kent_Network_Sensor"
#define DEVICE_NAME_CONFIG   "Config_Sensor"
//********************************************************//

//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// TX power
// Required for both EddyStone (@0m)
//========================================================//
// Valid values: -90 to +8dBm in hexadecimal using a
// 2's complement value for negative numbers
// Example: +4dBm = 0x04
//          -4dBm = 0xFC
//********************************************************//
#define TX_PWR_EDDY          0xFC
//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// EddyStone Specific Settings
//********************************************************//

//Eddystone Service UUID
#define EDDY_SVC_UUID        0xFEAA

//EddyStone Frame Types
#define UID                  0x00
#define URL                  0x10
#define TLM                  0x20
#define EID                  0x30

//EddyStone UID NameSpace
//First 10 bytes SHA-1 Hash Conversion of 'kent.network'
#define EDDY_NAMESPACE       "\83\0D\2F\8D\AF\9B\A2\B1\79\F0"

//EddyStone UID Instance
#define EDDY_INSTANCE        "\01\02\03\04\05\06"

//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// AD Record Tags
//********************************************************//
#define FLAGS                0x01
#define COMPLETE_LCL_NAME    0x09
//16 bit Service Data is required for EddyStone
#define SVC_DATA_16BIT       0x16
//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// Advertisement Parameters
//********************************************************//

//Advert types
#define ADV_IND              0
#define ADV_DIRECT_IND       1
#define ADV_SCAN_IND         2
#define ADV_NONCONN_IND      3

//Advert Type ADV_SCAN_IND
//Could be ADV_NONCONN_IND if no scan reports are used
//Could also be ADV_IND if connectable for configuration
#define ADV_TYPE             ADV_NONCONN_IND

//Advert Interval, time between successive Adverts
#define ADV_INTVL            1000

//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// Appearance of tag 512 == Generic tag
//********************************************************//
#define APPEARANCE           512
//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// General Discoverability; Limited Discoverability == 1
//********************************************************//
#define DISCOVER_MODE        2
//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// Connection values needed for GAP service regardless
// of whether connectable or not
//********************************************************//
#define MIN_CONN_INTVL       15000
#define MAX_CONN_INTVL       25000
#define CONN_SUP_TIMEOUT     750000
#define SLAVE_LATENCY        5
//********************************************************//
//--------------------------------------------------------//
//********************************************************//
// Device Information Service info
//********************************************************//
#define MANF_NAME            "Kent Network"
#define MODEL                "Sensor"
#define SERIAL_NUM           "C0EE4000010109E2"
#define HW_REV               "1.0"
#define APP_REV              "1.0"
#define SYSID                ""
#define REGLST               ""
#define PPID                 ""

//******************************************************************************
// Register Error Handler AS early AS possible
//******************************************************************************
Sub HandlerOnErr()
Endsub
onerror next HandlerOnErr

//******************************************************************************
// Debugging resource AS early AS possible
//******************************************************************************

//==============================================================================
Sub AssertResCode(byval rc AS integer,byval tag AS integer)
    IF rc!=0 THEN
    ENDIF
Endsub

//==============================================================================
Sub DbgMsgVal(byval msg$ AS string, byval vl AS integer)
    IF (ENABLE_DEBUG_PRINTS!=0) THEN
    ENDIF
Endsub

//==============================================================================
Sub DbgMsg(byval msg$ AS string)
    IF (ENABLE_DEBUG_PRINTS!=0) THEN
    ENDIF
Endsub


//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

DIM rc
DIM str$                    //Store data for string
DIM transmitInterval : transmitInterval = 15
DIM sleepCounter : sleepCounter = 0 // Creates an accurate long sleep
DIM okToTx : okToTx = 1     //Available duty cycle on one of sub-band (only matters in EU & AS)
                            //Change to 0 at data Tx and 1 at EVLORAMACNEXTTX

// Distance related variables
DIM distanceToFloor : distanceToFloor = 0 // distance between sensor and river bed

// BLE
DIM hMyChar,at$,conHndl
DIM bleConnectionState : bleConnectionState = 0

//adRptE$ and scanRptE$ for EddyStone adverts
DIM adRptE$ : adRptE$ = ""
DIM scanRptE$ : scanRptE$ = ""
DIM joined

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
Sub EndianSwap(byref atm)
    atm = ((atm >> 8) & 0xFF) | ((atm << 8) & 0xFF00)
Endsub

Function SwapBytes(v) AS Integer
Endfunc ((v>>8)&0xFF) + ((v<<8)&0xFF00)

//==============================================================================
// Subfunction to create a simple busy wait delay
//==============================================================================
Sub Delay(ms)
 DIM i : i = GetTickCount()
 WHILE GetTickSince(i)<ms
 ENDWHILE
Endsub

//==============================================================================
// Subfunction to close BLE connections
//==============================================================================
SUB CloseConnections()
    rc=BleDisconnect(conHndl)
    rc=BleAdvertStop()
Endsub

//==============================================================================
// Subfunction for BLE reg
//==============================================================================
Sub BLEEddyStartup()
    rc = BleGapSvcInit(DEVICE_NAME,0,APPEARANCE,MIN_CONN_INTVL,MAX_CONN_INTVL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
    rc = BleSvcRegDevInfo(MANF_NAME,MODEL,SERIAL_NUM,HW_REV,APP_REV,SYSID,REGLST,PPID)
Endsub

Function EddyStone1$()
//==============================================================================
// Build EddyStone UID String
//==============================================================================
//----------------------------------------------------
//Format:
    // 0 1  2  3  4 5 6 7 8 9 0 1 2 3  4 5 6 7 8 9
    // EddyStone_Svc_UUID
    //      Frame_Type
    //         TX_Power
    //            EddyStone_Namespace
    //                                 EddyStone_Instance
    // AAFE 00 E2 A014C1898BD7AB0A56B0 010203040506
//----------------------------------------------------
    DIM eddy1$, feddy1$

    rc = BleEncode16(eddy1$,EDDY_SVC_UUID,0)
    rc = BleEncode8(eddy1$,UID,2)
    rc = BleEncode8(eddy1$,TX_PWR_EDDY,3)
    feddy1$ = eddy1$ + EDDY_NAMESPACE + EDDY_INSTANCE
Endfunc feddy1$

//==============================================================================
// Subfunction for BLE advert creation
//==============================================================================
Sub BuildEddyAdverts()
    DIM EddyAD1$ : EddyAD1$ = EddyStone1$()
    DIM devname$ : devname$ = DEVICE_NAME

    //Initialize adRptE$ and scanRptE$ for EddyStone
    rc = BleAdvRptInit(adRptE$,DISCOVER_MODE,0,0)
    rc = BleScanRptInit(scanRptE$)

    //Build EddyStone Advert and Scan AD elements
    rc = BleAdvRptAddUuid16(adRptE$,EDDY_SVC_UUID,-1,-1,-1,-1,-1)
    rc = BleAdvRptAppendAD(adRptE$,SVC_DATA_16BIT,EddyAD1$)
    rc = BleAdvRptAppendAD(scanRptE$,COMPLETE_LCL_NAME,devname$)
Endsub

//==============================================================================
// Read the state of a jumper
//==============================================================================
Function readJumper(byVal pinName) AS Integer
    //Setting jumper AS Digial_IN with weak pull-up
    rc = gpiosetfunc(pinName,1,0x02)
    DIM jumperState
    jumperState = GpioRead(pinName)
    //Setting jumper AS Digial_IN without weak pull-up
    rc = gpiosetfunc(pinName,1,5)
Endfunc jumperState

//==============================================================================
// Initialise and instantiate initial ble service, characteristic, start adverts
//==============================================================================
FUNCTION ConfigDeviceByBLE()
    DIM rc, hSvc, adRpt$, addr$, scRpt$
    DIM attr$
    rc = NvRecordGetEx(1,attr$,"0")
    //commit service
    rc=BleSvcCommit(1,BleHandleUuid16(0x18EE),hSvc)
    //initialise char, write/read enabled, accept signed writes
    rc=BleCharNew(0x0A,BleHandleUuid16(1),BleAttrMetaData(1,1,20,0,rc),0,0)
    //commit char initialised above, with initial value to service 'hSvc'
    rc=BleCharCommit(hSvc,attr$,hMyChar)

    rc=BleScanRptInit(scRpt$)
    //Add 1 service handle to scan report
    //rc=BleAdvRptAddUuid16(scRpt$,hSvc,-1,-1,-1,-1,-1)
    //commit reports to GATT table - adRpt$ is empty
    rc=BleAdvRptsCommit(adRpt$,scRpt$)
    rc=BleAdvertStart(0,addr$,20,0,0)
ENDFUNC rc

//==============================================================================
// Read ultrasonic sensor -- takes median of a number of samples
//==============================================================================
Function ReadDistance()

  DIM distanceMM
  DIM localReadings(LOCAL_SAMPLES)        // array of local distance readings
  DIM i
  FOR i=0 TO (LOCAL_SAMPLES-1) STEP 1
    IF MB7060 THEN
      localReadings[i] = ((GpioRead(DISTANCE_SENSOR_PIN) * 109)) / 10
    ELSE
       localReadings[i] = ((GpioRead(DISTANCE_SENSOR_PIN) * 109) * 5) / 100
    ENDIF
    IF ENABLE_DEBUG_PRINTS THEN
		    PRINT "Distance:" ; localReadings[i] ; "\n"
	  ENDIF
    // XL reading happens at 1-Hz rate.
    Delay(1000)
  NEXT

  // Bubble sort
  DIM j, t

  FOR i=0 TO (LOCAL_SAMPLES-1) STEP 1
    FOR j=0 TO (LOCAL_SAMPLES-i-1) STEP 1
      IF (localReadings [j] > localReadings[j+1] ) THEN
        // Swap Places
        t = localReadings [j]
        localReadings[j] = localReadings [j+1]
        localReadings [j+1] = t
      ENDIF
    NEXT
  NEXT

  IF ENABLE_DEBUG_PRINTS THEN
    PRINT "Sorted Array: \n"
    FOR i=0 TO (LOCAL_SAMPLES-1) STEP 1
      PRINT "Distance:" ; localReadings[i] ; "\n"
    NEXT
  ENDIF


  // Find median
  IF LOCAL_SAMPLES % 2 == 0 THEN
  distanceMM = (localReadings[(LOCAL_SAMPLES/2)-1]+localReadings[(LOCAL_SAMPLES/2)])/2
  ELSE
  distanceMM = localReadings[((LOCAL_SAMPLES-1)/2)]
  ENDIF
  IF ENABLE_DEBUG_PRINTS THEN
		    PRINT "Median Distance:" ; distanceMM ; "\n"
	ENDIF
  IF distanceToFloor != 0 THEN
    distanceMM = distanceToFloor - distanceMM
  ENDIF
Endfunc distanceMM

//==============================================================================
// Transmit average river height over LoRaWAN network
//==============================================================================
Function LoraPost() AS Integer
    
      //Data format
      DIM atm, theoreticalMax, actualMax
      DIM distanceVal$, distance, txData$

      distance = ReadDistance() 
      rc = gpiosetfunc(ENABLE_SENSORS,2,0)  // Puts sensors back into 'off state'

      
      IF ENABLE_DEBUG_PRINTS THEN
		    PRINT "Result of distance:" ; distance  ; "\n"
	    ENDIF

      distanceVal$ = ""
      EndianSwap(distance)

      IF ENABLE_DEBUG_PRINTS THEN
		    PRINT "Result of Endian Swap:" ; distance ; "\n"
	    ENDIF

      rc=bleencode16(distanceVal$,distance,0)

      IF ENABLE_DEBUG_PRINTS THEN
		    PRINT "Result of bleencode16:" ; strgetchr(distanceVal$,0)  ; "\n"
        PRINT "Result of bleencode16:" ; strgetchr(distanceVal$,1)  ; "\n"
	    ENDIF

      txData$ = distanceVal$

      IF ENABLE_DEBUG_PRINTS THEN
		    PRINT "Transmit Payload:" ; txData$ ; "\n"
	    ENDIF

    IF (joined == 1) THEN
      IF (okToTx == 1) THEN 
        //There is available duty cycle
        //Check the size of data is within maximum payload size
        rc = LoramacQueryTxPossible(strlen(txData$), theoreticalMax, actualMax)
        IF (rc == 0) THEN
            //Current data rate can handle the outbound data size
              IF ENABLE_DEBUG_PRINTS THEN
                PRINT "Sending Payload \n"
              ENDIF
              rc = LORAMACTxData(1, txData$, 0)
        ELSE
            // Data payload is too large for current data rate"
            //Increase data rate by one
            IF ENABLE_DEBUG_PRINTS THEN
                PRINT "Payload to large, increasing data rate \n"
            ENDIF
            rc = LORAMACGetOption(LORAMAC_OPT_DATA_RATE, str$)
            DIM dr : dr = StrValDec(str$)
            IF (dr <= 4) then
                dr = dr + 1
                sprint #str$, dr
                // Raising data rate for higher max payload
            ENDIF
            rc = LORAMACSetOption(LORAMAC_OPT_DATA_RATE, str$)
        ENDIF
    ELSE
        // There is no available duty cycle
        okToTx = 0  //Will become 1 when EVLORAMACNEXTTX is triggered
    ENDIF
  ELSE
      rc = LORAMACJoin(LORAMAC_JOIN_BY_REQUEST)
  ENDIF
Endfunc 1

//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when it is time to take a measurement. 
//==============================================================================

Function EnableSensors() AS Integer
  // Turn on sensors
  IF ENABLE_DEBUG_PRINTS THEN
	  PRINT "Enabling sensors \n"
	ENDIF
  gpiowrite(ENABLE_SENSORS,1)
  // Start a 5000 millisecond timer to allow things to stabilize
  TimerStart(1,5000,0)
Endfunc 1

//==============================================================================
// This handler is called to create a long sleep
//==============================================================================

Function LongSleep() AS Integer

  IF sleepCounter == transmitInterval - 1 THEN
    sleepCounter = 0
    rc = EnableSensors()
  ELSE
    sleepCounter = sleepCounter + 1
  ENDIF

Endfunc 1

//==============================================================================
// Ble event handler
//==============================================================================
FUNCTION HndlrBleMsg(BYVAL nMsgId, BYVAL nCtx)
    conHndl=nCtx
    IF nMsgID==1 THEN
        // Disconnected from client
        bleConnectionState = 0
        rc = ConfigDeviceByBLE()
    ELSEIF nMsgID==0 THEN
        // Connected to client
        bleConnectionState = 1
    ENDIF
ENDFUNC 1

//==============================================================================
// New char value via BLE handler
//==============================================================================
FUNCTION HandlerCharVal(BYVAL charHandle, BYVAL offset, BYVAL len)
    DIM s$
    IF charHandle == hMyChar THEN
        // Byte(s) have been written to char value attribute
        rc=BleCharValueRead(hMyChar,s$)
        rc = NvRecordSet(1,s$)
        distanceToFloor = StrValDec(s$)
    ENDIF
ENDFUNC 1

//==============================================================================
// This handler is called when there is available duty cycle on one of sub-band to send data
//==============================================================================
Function HandlerNextTx() AS Integer
    okToTx = 1
Endfunc 1

//==============================================================================
// This handler is called when there is a LoRa TX Complete event
//==============================================================================
Function HandlerLoRaTxComp() AS Integer
Endfunc 1

//==============================================================================
// This handler is called when there is a LoRa RX Complete event
//==============================================================================
Function HandlerLoRaRxComp() AS Integer
Endfunc 1

//==============================================================================
// This handler is called when the LoRa Join procedure starts
//==============================================================================
Function HandlerLoRaJoining() AS Integer
  IF ENABLE_DEBUG_PRINTS THEN
	    PRINT "Joining \n"
	ENDIF
Endfunc 1

//==============================================================================
// This handler is called when there is a LoRa Join Success Complete event
//==============================================================================
Function HandlerLoRaJoined() AS Integer
    IF ENABLE_DEBUG_PRINTS THEN
	    PRINT "Network Joined \n"
	  ENDIF
    //Overide the lorawan spreadfactor to SF10 (data rate 2)
	  str$ = "2"
	  rc = LORAMACSetOption(LORAMAC_OPT_DATA_RATE, str$)
    // Enable ADR
    str$ = "1"
    rc = LoramacSetOption(LORAMAC_OPT_ADR_ENABLE,str$)
    joined = 1
    TimerStart(0, 60000, 1)
Endfunc 1

//==============================================================================
// This handler is called when there is a LoRa Join Fail event
//==============================================================================
Function HandlerLoRaJoinFailed() AS Integer
 joined = 0
Endfunc 1

//==============================================================================
// This handler is called when there is a LoRa Tx Timeout event
//==============================================================================
Function HandlerLoRaTxTimeout() AS Integer
Endfunc 1

//==============================================================================
// This handler is called when there is a LoRa Rx Timeout event
//==============================================================================
Function HandlerLoRaRxTimeout() AS Integer
Endfunc 1

//==============================================================================
// This handler is called when there is an error in the receive path
//==============================================================================
Function HandlerLoRaRxError() AS Integer
Endfunc 1

//==============================================================================
// This handler is called when the TxDone signal has been received in the module
//==============================================================================
Function HandlerLoRaTxDone() AS Integer
Endfunc 1

//==============================================================================
// This handler is called an RxWindow has faied to receive a sync pulse
//==============================================================================
Function HandlerLoRaNoSync() AS Integer
Endfunc 1

//==============================================================================
// This handler is called when An ADR command has been receive AS part of a downlink.
//==============================================================================
Function HandlerLoRaAdr(PacketType, FramePending) AS Integer
Endfunc 1

//==============================================================================
// This handler is called when ble adv times out
//==============================================================================
Function StartEddyAds() AS Integer
    DIM peer$ : peer$ = ""
    rc = BleAdvRptsCommit(adRptE$,scanRptE$)
    rc = BleAdvertStart(ADV_TYPE,peer$,ADV_INTVL,0,0)
Endfunc 1

//==============================================================================
// This handler is called when config via BLE times out
//==============================================================================
Function ConfigViaBleTimedOut() AS Integer
    IF ENABLE_DEBUG_PRINTS THEN
		  PRINT "Config by BLE period ends, switching to eddystone\n"
	  ENDIF
    IF bleConnectionState == 0 THEN
      TimerCancel(2)
      CloseConnections()
      //  Begin eddystone beaconing
      BLEEddyStartup()
      BuildEddyAdverts()
      rc = StartEddyAds()
    ENDIF
Endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//==============================================================================
// Enable synchronous event handlers
//==============================================================================
OnEvent  EVBLE_ADV_TIMEOUT    call  StartEddyAds
ONEVENT  EVCHARVAL            call  HandlerCharVal
ONEVENT  EVBLEMSG             call  HndlrBleMsg
OnEvent  EVLORAMACTXCOMPLETE  call  HandlerLoRaTxComp
OnEvent  EVLORAMACRXCOMPLETE  call  HandlerLoRaRxComp
OnEvent  EVLORAMACJOINING     call  HandlerLoRaJoining
OnEvent  EVLORAMACJOINED      call  HandlerLoRaJoined
OnEvent  EVLORAMACJOINFAIL    call  HandlerLoRaJoinFailed
OnEvent  EVLORAMACTXTIMEOUT   call  HandlerLoRaTxTimeout
OnEvent  EVLORAMACRXTIMEOUT   call  HandlerLoRaRxTimeout
OnEvent  EVLORAMACRXERROR     call  HandlerLoRaRxError
OnEvent  EVLORAMACTXDONE      call  HandlerLoRaTxDone
OnEvent  EVLORAMACNOSYNC      call  HandlerLoRaNoSync
OnEvent  EVLORAMACADR         call  HandlerLoRaAdr
OnEvent  EVLORAMACNEXTTX      call  HandlerNextTx

OnEvent  EVTMR0               call  LongSleep
OnEvent  EVTMR1               call  LoraPost
OnEvent  EVTMR2               call  ConfigViaBleTimedOut

//==============================================================================
// Set up GPIO and join LoRa network
//==============================================================================
Sub Initialise()

    rc = gpiosetfunc(ENABLE_SENSORS,2,0)  // Puts sensors in 'off state'
    uartclose()                           // Closes the UART

    //Set up 10bit ADC with 1/3 prescaler FOR distance and temperature sensor
    rc = gpiosetfunc(DISTANCE_SENSOR_PIN,3,0x13)

    // Attempt to read sensor distance to floor bed from memory
    DIM distanceAsString$
    rc = NvRecordGetEx(1,distanceAsString$,"0")
    distanceToFloor = StrValDec(distanceAsString$)

    IF ENABLE_DEBUG_PRINTS THEN
	    PRINT "Start BLE adverts for config \n"
	  ENDIF
    // Start BLE service to allow device to be remotely configured
    IF ConfigDeviceByBLE()==0 THEN
      TimerStart(2, 60000, 1)
    ELSE
      STOP
    ENDIF

    //Read jumpers to set transmission interval
    DIM jumper1State
    DIM jumper2State
    jumper1State = readJumper(JUMPER1)
    jumper2State = readJumper(JUMPER2)

    SELECT (jumper1State * 2) + jumper2State
      CASE 0
        transmitInterval = 15
      CASE 1
        transmitInterval = 30
      CASE 2
        transmitInterval = 45
      CASE 3
        transmitInterval = 60
      CASE ELSE
        transmitInterval = 15
    ENDSELECT

    IF ENABLE_DEBUG_PRINTS THEN
	    PRINT "Transmit Interval is: "; transmitInterval ; " minutes \n"
	  ENDIF

    joined = 0
    //Automatically join the LoRaWAN network if set
    IF (AUTO_JOIN == 1) THEN
        rc = LORAMACJoin(JOIN_TYPE)
        IF rc != 0 THEN
          IF ENABLE_DEBUG_PRINTS THEN
	          PRINT "Join Error \n"
            STOP
	        ENDIF
        ENDIF
    ENDIF

Endsub

Initialise()

//Wait for a synchronous event.
WaitEvent
